import{_ as i,c as s,J as o,w as t,a6 as a,m as e,a as n,G as _,o as r}from"./chunks/framework.d-Ywx6yJ.js";const c="/assets/Pasted%20image%2020240315202941.CTlJRvjr.png",d="/assets/Pasted%20image%2020240315202947.RN9CjAmA.png",u="/assets/Pasted%20image%2020240418153026.CbaSJyuI.png",g="/assets/Pasted%20image%2020240315202957.CyXFBS5n.png",v=JSON.parse('{"title":"框架介绍","description":"","frontmatter":{"title":"框架介绍"},"headers":[],"relativePath":"yvanui/01_base/01_index.md","filePath":"yvanui/01_base/01_index.md"}'),S={name:"yvanui/01_base/01_index.md"},h=a('<h1 id="框架介绍" tabindex="-1">框架介绍 <a class="header-anchor" href="#框架介绍" aria-label="Permalink to &quot;框架介绍&quot;">​</a></h1><h2 id="系统架构" tabindex="-1">系统架构 <a class="header-anchor" href="#系统架构" aria-label="Permalink to &quot;系统架构&quot;">​</a></h2><p><img src="'+c+'" alt="" loading="lazy"></p>',3),p=e("p",null,null,-1),m=a('<ol><li><strong>上游标准接口</strong>：比如ERP系统、MES系统、主数据系统等；</li><li><strong>WMS服务</strong>：这是整个架构的核心部分。它包括了基础资料（如仓库、货位等）、入库、出库和查询报表等功能模块。这些模块涵盖了仓库管理的各个方面，如收货、质检、盘点、复核等；</li><li><strong>API接口</strong>：WMS 通过接口平台与 MFC（多穿车调度系统）、RCS（AGV调度系统）、OES（订单执行系统）、支付系统、园区系统、快递系统进行对接；</li><li><strong>规则引擎</strong>：这通常用于处理复杂的业务逻辑和决策过程，例如上架规则、出库规则等；</li><li><strong>凯乐士开发平台</strong>：独立部署的二次开发平台，可以进行低代码的功能开发、打印模板的开发、数据字典的开发、数据库的维护、查询报表的维护、接口平台的维护、规则策略的维护、流程的维护等等</li></ol><h2 id="架构分层" tabindex="-1">架构分层 <a class="header-anchor" href="#架构分层" aria-label="Permalink to &quot;架构分层&quot;">​</a></h2><p><img src="'+d+'" alt="" loading="lazy"></p>',3),T=e("p",null,null,-1),P=e("ul",null,[e("li",null,"底层，底层是所有项目的框架，包括了基础的网络服务框架、安全、授权、UI组件框架、数据库操作底层、消息队列底层、接口底层、部署支持、监控、计划任务、存储等；"),e("li",null,"产品层：产品层主要是WMS系统的核心方法，包括系统管理、库存记账、原子业务逻辑（拣货、复合、盘点）基础方法、调度算法、货位分配算法、工作位分配等等核心逻辑；"),e("li",null,"项目层：每个项目单独定义的层级，包括：批次属性、商品扩展属性、数据字典、容器属性、各种规则策略（上架货位分配策略、工位分配策略、出库库存分配策略、库存周转策略、入库质检策略、换箱策略、线路策略）、查询报表、工作流程、打印模板、个性化的界面和功能交互等；"),e("li",null,"用户层：每个类用户或角色，可以单独定义界面的风格、语言、表格字段顺序、表格字段可见性、表单字段可见性、表单布局、数据查询策略等；")],-1),f=e("h2",{id:"实践案例-大型设备仓部署",tabindex:"-1"},[n("实践案例：大型设备仓部署 "),e("a",{class:"header-anchor",href:"#实践案例-大型设备仓部署","aria-label":'Permalink to "实践案例：大型设备仓部署"'},"​")],-1),C=e("p",null,[e("img",{src:u,alt:"",loading:"lazy"})],-1),b=e("p",null,null,-1),M=a('<ul><li><strong>持续集成与交付流程</strong>：采用Jenkins自动从Git代码仓库中拉取最新源码，通过Gradle构建工具和Nexus私有仓库完成应用系统的Docker镜像构建，并将其推送到Harbor镜像仓库以供后续使用。</li><li><strong>容器编排与服务管理</strong>：利用Rancher作为Kubernetes (K8s) 的可视化管理平台，让架构师和运维团队能直观地监控和管理服务集群，包括服务的部署、升级、扩容缩容等操作。K8s则从Harbor获取指定版本的应用镜像，负责启动服务实例，同时承担起内部负载均衡策略的实施，以及灰度发布、故障恢复、跨地域容灾等功能的管理。</li><li><strong>前端服务</strong>：wms-ui是经过打包后的前端静态资源Docker镜像，便于快速部署和更新。</li><li><strong>数据库服务</strong>：WMS系统依赖于PostgreSQL数据库管理系统，用于存储和管理复杂的数据关系。</li><li><strong>文件存储</strong>：采用Minio作为对象存储服务，用于存储和管理WMS系统相关的非结构化文件数据。</li><li><strong>缓存与授权</strong>：运用Redis进行高速缓存管理和授权数据存储，提高系统性能与安全性。</li><li><strong>内部系统集成</strong>：为了保证低延迟和高效率的交互响应，WMS系统需在同一局域网环境中与以下内部系统进行紧密集成： <ul><li>调用WCS系统执行相关仓储控制操作；</li><li>调用RCS系统执行相关资源调度任务；</li><li>调用MFC系统执行多穿库控制指令；</li><li>调用PES系统执行穿梭板调度控制指令。</li></ul></li></ul><h2 id="实践案例-saas部署" tabindex="-1">实践案例：SaaS部署 <a class="header-anchor" href="#实践案例-saas部署" aria-label="Permalink to &quot;实践案例：SaaS部署&quot;">​</a></h2><p><img src="'+g+'" alt="" loading="lazy"></p>',3),W=e("p",null,null,-1),x=a("<ul><li><code>Jenkins</code>拉取<code>GIT</code>中的源码，借助<code>gradle</code>和<code>nexus</code>构建应用系统docker,并推送至<code>Habor</code>；</li><li><code>Rancher</code>是<code>K8s</code>的管理界面，方便架构师和运维团队监控并维护服务集群；</li><li>K8s从Habor拉起指定版本镜像进行实例部署，并由K8s管理内部负载均衡策略，灰度策略、服务伸缩容、异地容灾都由K8s进行管理；</li><li>Wms-ui-pc / WMS-ui-mobile 是前端打包后的docker镜像，属于静态资源镜像；</li><li>WMS系统启动后将自生运行实例注册至nacos，服务之间的调用从nacos中获取服务列表；</li><li>WMS-Gateway是WMS后端服务接入口，Gateway读取nacos的服务列表，并进行后台服务请求的分发；</li><li>WMS需要<code>PostgreSQL</code>进行数据库管理；</li><li>WMS需要<code>ElasticSearch</code>进行索引管理；</li><li>WMS需要<code>Minio</code>进行文件的存储和管理；</li><li>WMS需要<code>Redis</code>管理缓存和授权数据；</li><li>WMS需要<code>Kafka</code>管理日志和消息队列；</li></ul>",1);function A(y,k,R,V,I,N){const l=_("YvCallOut");return r(),s("div",null,[h,o(l,{type:"info",title:"说明"},{default:t(()=>[p]),_:1}),m,o(l,{type:"info",title:"系统框架分为4层"},{default:t(()=>[T]),_:1}),P,f,C,o(l,{type:"info",title:"案例说明"},{default:t(()=>[b]),_:1}),M,o(l,{type:"info",title:"案例说明"},{default:t(()=>[W]),_:1}),x])}const q=i(S,[["render",A]]);export{v as __pageData,q as default};
